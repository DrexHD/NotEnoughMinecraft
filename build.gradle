import org.jetbrains.changelog.Changelog

plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
    id 'org.jetbrains.changelog' version '2.+'
}

version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven { url 'https://maven.nucleoid.xyz' }
    maven { url 'https://maven.ladysnake.org/releases' }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation include("eu.pb4:factorytools:${project.factorytools_version}")
    modImplementation "eu.pb4:polymer-core:${project.polymer_version}"
    modImplementation("eu.pb4:polymer-blocks:${project.polymer_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "eu.pb4:polymer-resource-pack:${project.polymer_version}"
    modImplementation("eu.pb4:polymer-sound-patcher:${project.polymer_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "eu.pb4:polymer-resource-pack-extras:${project.polymer_version}"
    modImplementation("eu.pb4:polymer-autohost:${project.polymer_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "eu.pb4:polymer-virtual-entity:${project.polymer_version}"

    modImplementation(include("org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}"))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }
}

publishMods {
    file = remapJar.archiveFile
    type = STABLE
    changelog = fetchChangelog()

    displayName = "NotEnoughMinecraft ${version.get()}"
    modLoaders.add("fabric")
    modLoaders.add("quilt")

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "sbnEegTp"
        minecraftVersions.add(project.minecraft_version)
        requires("fabric-api", "polymer")
    }
    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = providers.environmentVariable("GITHUB_REPOSITORY").getOrElse("DrexHD/NotEnoughMinecraft")
        commitish = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("main")
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    inputs.property "archivesName", project.base.archivesName

    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }
    }
}

private String fetchChangelog() {
    def log = getChangelog.changelog.get()
    if (log.has(project.mod_version)) {
        return log.renderItem(
                log.get(project.mod_version).withHeader(false),
                Changelog.OutputType.MARKDOWN
        )
    } else {
        return ""
    }
}